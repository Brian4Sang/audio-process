
#!/usr/bin/env python3
"""
Â§öËØ¥ËØù‰∫∫Ê£ÄÊµãÔºàMulti-speaker DetectionÔºâ

ÂäüËÉΩÔºöÂàÜÊûêÊØèÊù°ËØ≠Èü≥ÊòØÂê¶ÂåÖÂê´Â§ö‰ΩçËØ¥ËØù‰∫∫ÔºåÈÄöËøáÊèêÂèñ speaker embedding Âπ∂ËÅöÁ±ªÂà§Êñ≠„ÄÇ

ËæìÂÖ•Ôºö
- ‰∏Ä‰∏™Èü≥È¢ëÁõÆÂΩïÔºåÂåÖÂê´Â§ö‰∏™Â∑≤ÂàáÁâáÁöÑ wav Êñá‰ª∂ÔºàÂ¶ÇÂàáÁâáÁªìÊûúÔºâ

ËæìÂá∫Ôºö
- ‰∏Ä‰∏™ JSON Êñá‰ª∂ÔºåËÆ∞ÂΩïÊØèÊù°ËØ≠Èü≥ÊòØÂê¶‰∏∫Â§öËØ¥ËØù‰∫∫ËØ≠Èü≥
- ÂèØÈÄâËæìÂá∫ÔºöËøáÊª§ÂêéÁöÑÈü≥È¢ëÊñá‰ª∂Â§πÔºàÂè™‰øùÁïôÂçïËØ¥ËØù‰∫∫Ôºâ

ÂèÇÊï∞Ôºö
--input-dir         ËæìÂÖ•Èü≥È¢ëÁõÆÂΩï
--output-json       ‰øùÂ≠òÊ£ÄÊµãÁªìÊûúÁöÑË∑ØÂæÑÔºàÈªòËÆ§ multi_spk_result.jsonÔºâ
--embedding-model   Áî®‰∫éÊèêÂèñ speaker embedding ÁöÑÊ®°ÂûãË∑ØÂæÑÔºàonnxÔºâ
--threshold         Âà§Êñ≠‰∏∫Â§öËØ¥ËØù‰∫∫ÁöÑÁ±ªÈó¥Ë∑ùÁ¶ªÈòàÂÄºÔºàÈªòËÆ§ 0.75Ôºâ
--logdir            ‰øùÂ≠òÂ§ÑÁêÜÊó•ÂøóÁöÑÁõÆÂΩïÔºàÈªòËÆ§ logs/Ôºâ
"""

import os
import json
import torch
import numpy as np
from tqdm import tqdm
from pathlib import Path
import click
from loguru import logger

from fish_audio_preprocess.utils.stage_logger import StageLogger
from fish_audio_preprocess.utils.file import list_files, AUDIO_EXTENSIONS
from fish_audio_preprocess.utils.extract_embedding import extract_embedding
from fish_audio_preprocess.utils.cluster_embeddings import cluster_embeddings



@click.command()
@click.option("--input-dir", type=click.Path(exists=True, file_okay=False), required=True, help="ËæìÂÖ•Èü≥È¢ëÁõÆÂΩï")
@click.option("--embedding-model", type=click.Path(exists=True, dir_okay=False), required=True, help="Speaker embedding Ê®°Âûã (ONNX)")
@click.option("--output-json", type=click.Path(), default="multi_spk_result.json", show_default=True, help="Â§öËØ¥ËØù‰∫∫Ê£ÄÊµãÁªìÊûú")
@click.option("--threshold", type=float, default=0.75, show_default=True, help="ËÅöÁ±ªË∑ùÁ¶ªÈòàÂÄº")
@click.option("--logdir", type=click.Path(), default="logs", show_default=True, help="‰øùÂ≠òÊó•ÂøóÁõÆÂΩï")
def detect_multi_spk(input_dir, embedding_model, output_json, threshold, logdir):
    input_dir = Path(input_dir)
    all_wavs = list_files(input_dir, extensions=AUDIO_EXTENSIONS, recursive=True)
    logger.info(f"üîç Found {len(all_wavs)} wavs for speaker detection")

    result = {}
    stage_logger = StageLogger("multi_spk_detect", logdir)

    for wav_path in tqdm(all_wavs):
        stage_logger.log_total()
        try:
            utt_id = str(wav_path.relative_to(input_dir)).replace("/", "_")
            embeddings = extract_embedding(str(wav_path), embedding_model)
            label_count = cluster_embeddings(embeddings, threshold)
            result[utt_id] = {"multi_speaker": label_count > 1, "spk_count": label_count}
            stage_logger.log_success()
        except Exception as e:
            logger.warning(f"‚ùå Failed on {wav_path}: {e}")
            stage_logger.log_failed(str(wav_path), str(e))

    output_json = Path(output_json)
    output_json.parent.mkdir(parents=True, exist_ok=True)
    with open(output_json, "w", encoding="utf-8") as f:
        json.dump(result, f, indent=2, ensure_ascii=False)

    stage_logger.save()
    logger.info(f"‚úÖ Detection result saved to {output_json}")


if __name__ == "__main__":
    detect_multi_spk()
